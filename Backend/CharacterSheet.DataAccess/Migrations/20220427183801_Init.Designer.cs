// <auto-generated />
using CharacterSheet.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterSheet.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220427183801_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("CharacterSheet.Models.CharacterData.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short>("Charisma")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short>("Constitution")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Dexterity")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Intelegence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Wisdom")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterSheet.Models.CharacterData.CharacterLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterLevels", (string)null);
                });

            modelBuilder.Entity("CharacterSheet.Models.CharacterData.CharacterSkill", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SkillId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CountAsClassSkill")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Points")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharacterId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkills", (string)null);
                });

            modelBuilder.Entity("CharacterSheet.Models.MasterData.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyAbility")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TrainedOnly")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CharacterSheet.Models.CharacterData.CharacterLevel", b =>
                {
                    b.HasOne("CharacterSheet.Models.CharacterData.Character", "Character")
                        .WithMany("Level")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("CharacterSheet.Models.CharacterData.CharacterSkill", b =>
                {
                    b.HasOne("CharacterSheet.Models.CharacterData.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterSheet.Models.MasterData.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CharacterSheet.Models.CharacterData.Character", b =>
                {
                    b.Navigation("Level");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
